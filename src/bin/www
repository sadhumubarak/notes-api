#!/usr/bin/env node

const http = require('http');
const app = require('./../app');

const port = process.env.PORT || '8081';
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
* Listen on provided port, on all network interfaces.
*/
server.listen(port, () => {
    console.log('Express server listening on port ', server.address().port); // eslint-disable-line
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${ port }` : `Port ${ port }`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(`${ bind } requires elevated privileges`); // eslint-disable-line
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(`${ bind } is already in use`); // eslint-disable-line
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `Pipe ${ addr }` : `Port ${ addr.port }`;
    console.log(`Listening on ${ bind }`); // eslint-disable-line
}
